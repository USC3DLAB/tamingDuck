source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(dataSet = datasetwwsis, state = "washington", stateCode = "wa", plotmap = TRUE)
datasetwwsis <- readWWSISSolarData(dataSets = datasetwwsis, state = "washington", stateCode = "wa", plotmap = TRUE)
library(ggmap)
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("ggplot2")
datasetwwsis <- readWWSISSolarData(dataSets = datasetwwsis, state = "washington", stateCode = "wa", plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(dataSets = datasetwwsis, state = "washington", stateCode = "wa", plotmap = TRUE)
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa")
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa")
install.packages('ggplot2',dependencies = TRUE)
y
library(ggplot2)
library(ggplot)
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("lazyeval")
library(ggplot2)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = dataset, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = dataset, plotmap = TRUE)
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
readWWSISSolarData(state = "washington", stateCode = "wa", dataset = dataset, plotmap = TRUE)
readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa")
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap")
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
print(paste("./",state,"_pv-2006"))
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
(filename = "hello")
png(filename = "hello")
fig = png(filename = "hello")
fig
png(filename = "hello")
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
getwd()
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
(map.background, extent = 'panel') + geom_point(data = df, aes(x = lon, y = lat), color = "orange")
ggmap(map.background, extent = 'panel') + geom_point(data = df, aes(x = lon, y = lat), color = "orange")
getwd()
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
png(filename = paste(getwd(), "/", state,"_pv-2006", sep = ""))
map.background <- get_googlemap(state, zoom = 6, key = "AIzaSyDi-HXKpj26zQonCSyn91geb59nj0vwHUU")
map.background <- get_googlemap(state, zoom = 6, key = "AIzaSyDi-HXKpj26zQonCSyn91geb59nj0vwHUU")
ggmap(map.background, extent = 'panel') + geom_point(data = df, aes(x = lon, y = lat), color = "orange")
map.background <- get_googlemap(state, zoom = 6, key = "AIzaSyDi-HXKpj26zQonCSyn91geb59nj0vwHUU")
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
map.background <- get_googlemap(state, zoom = 6, key = "AIzaSyDi-HXKpj26zQonCSyn91geb59nj0vwHUU")
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
ggmap(map.background, extent = 'panel')
ggmap(map.background, extent = 'panel') + geom_point(data = df, aes(x = lon, y = lat), color = "orange")
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/readers/readWWSISSolarData.R')
datasetwwsis <- readWWSISSolarData(state = "washington", stateCode = "wa", dataset = datasetwwsis, plotmap = TRUE)
# initializations
rm(list=ls(all=TRUE))
set.seed(1)
RScriptsPath = "/Users/semihatakan/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts"
dataSetPath = "/Users/semihatakan/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/datasets/3d-nrel118/stocProcesses"
simLength = 24 #days
numScenarios = 10
lookahead = 3 #hours
# import libraries
library("abind");
# source functions
source(sprintf("%s/readers/readNRELData.R", RScriptsPath))
source(sprintf("%s/solarModels/solarVarModel.R", RScriptsPath))
source(sprintf("%s/solarModels/solarSimulate.R", RScriptsPath))
source(sprintf("%s/windModels/windVarModel.R", RScriptsPath))
source(sprintf("%s/windModels/windSimulate.R", RScriptsPath))
source(sprintf("%s/tsUtilities/decomposeTSData.R", RScriptsPath))
source(sprintf("%s/tsUtilities/varSimulate.R", RScriptsPath))
source(sprintf("%s/tsUtilities/interpolate.R", RScriptsPath))
### Read Data ###
dataset = readNRELData(inputDir = sprintf("%s/",dataSetPath))
wModel = windVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "DA", lag.max = 5, infocrit = "SC")
for (name in names(wModel$model$est$varresult)) {
if (anyNA(wModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
### Solar Model ###
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "DA", lag.max = 5, infocrit = "SC")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
print("Modeling is completed")
### Solar Model ###
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
sModel$model$est$varresult$y8
sModel$model$est$varresult$y7
sModel$model$est$varresult$y8$coefficients
sModel$model$est$varresult$y8$xlevels
sModel$model$est$varresult$y8$model
summary(sModel$model$est$varresult$y8$model)
sModel$model$est$varresult$y8$model
sModel$model$est$varresult$y8$coefficients
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 10, infocrit = "SC")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
sModel$model$est$varresult$y8$coefficients
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "FPE")
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "FPE")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
source('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
for (name in names(sModel$model$est$varresult)) {
if (anyNA(sModel$model$est$varresult[[name]]$coefficients)) {
print("Error! The VAR model cannot estimate regression coefficients!")
}
}
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/runSimulate.R')
simPaths
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "HQ")
ts
dim(ts)
dim(ts[,8,1])
dim(ts[,7,1])
ts[,8,1]
ts.plot(ts[,8,])
normalizedTS[,8,]
dim(normalizedTS)
ts.plot(normalizedTS[,8]
)
ts.plot(normalizedTS[,8])
ts.plot(normalizedTS[,1])
ts.plot(normalizedTS[,2])
ts.plot(normalizedTS[,3])
ts.plot(normalizedTS[,4])
ts.plot(normalizedTS[,5])
ts.plot(normalizedTS[,6])
ts.plot(normalizedTS[,7])
ts.plot(normalizedTS[,8])
ts.plot(normalizedTS[,9])
ts.plot(normalizedTS[,10])
ts.plot(normalizedTS[,11])
ts.plot(normalizedTS[,12])
ts.plot(normalizedTS[,13])
ts.plot(normalizedTS[,14])
ts.plot(normalizedTS[,15])
ts.plot(normalizedTS[,14])
ts.plot(normalizedTS[,8])
ts.plot(normalizedTS[,6])
ts.plot(normalizedTS[,8])
ts.plot(normalizedTS[,6])
ts.plot(normalizedTS[,8])
ts.plot(normalizedTS[,8]-normalizedTS[,6])
ts.plot(normalizedTS[,8]-normalizedTS[,7])
ts.plot(normalizedTS[,8]-normalizedTS[,8])
ts.plot(normalizedTS[,8]-normalizedTS[,6])
ts.plot(normalizedTS[,8]-normalizedTS[,5])
ts.plot(normalizedTS[,8]-normalizedTS[,4])
ts.plot(normalizedTS[,8]-normalizedTS[,3])
ts.plot(normalizedTS[,8]-normalizedTS[,2])
ts.plot(normalizedTS[,8]-normalizedTS[,1])
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
dataset[[1]]$capacity
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
cap
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarVARModel.R')
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
ts.plot(normalizedTS[,8]-normalizedTS[,6])
ts.plot(normalizedTS[,8]-normalizedTS[,6])
lm(normalizedTS[,1] ~ normalizedTS[,-1])
ts.plot(normalizedTS[,1]-normalizedTS[,7])
lm(normalizedTS[,2] ~ normalizedTS[,-2])
lm(normalizedTS[,7] ~ normalizedTS[,-7])
ts.plot(normalizedTS[,8]-normalizedTS[,7])
ts.plot(normalizedTS[,1]-normalizedTS[,1])
ts.plot(normalizedTS[,1]-normalizedTS[,2])
ts.plot(normalizedTS[,1]-normalizedTS[,3])
ts.plot(normalizedTS[,1]-normalizedTS[,4])
ts.plot(normalizedTS[,1]-normalizedTS[,5])
ts.plot(normalizedTS[,1]-normalizedTS[,6])
ts.plot(normalizedTS[,1]-normalizedTS[,7])
ts.plot(normalizedTS[,1]-normalizedTS[,8])
ts.plot(normalizedTS[,1]-normalizedTS[,9])
ts.plot(normalizedTS[,1]-normalizedTS[,10])
ts.plot(normalizedTS[,1]-normalizedTS[,11])
ts.plot(normalizedTS[,1]-normalizedTS[,12])
ts.plot(normalizedTS[,1]-normalizedTS[,13])
ts.plot(normalizedTS[,1]-normalizedTS[,14])
ts.plot(normalizedTS[,2]-normalizedTS[,14])
ts.plot(normalizedTS[,2]-normalizedTS[,13])
ts.plot(normalizedTS[,2]-normalizedTS[,12])
ts.plot(normalizedTS[,2]-normalizedTS[,11])
ts.plot(normalizedTS[,2]-normalizedTS[,10])
ts.plot(normalizedTS[,2]-normalizedTS[,9])
ts.plot(normalizedTS[,2]-normalizedTS[,8])
ts.plot(normalizedTS[,2]-normalizedTS[,7])
ts.plot(normalizedTS[,2]-normalizedTS[,6])
ts.plot(normalizedTS[,2]-normalizedTS[,5])
ts.plot(normalizedTS[,2]-normalizedTS[,4])
ts.plot(normalizedTS[,2]-normalizedTS[,3])
ts.plot(normalizedTS[,2]-normalizedTS[,2])
ts.plot(normalizedTS[,2]-normalizedTS[,1])
ts.plot(normalizedTS[,3]-normalizedTS[,4])
ts.plot(normalizedTS[,3]-normalizedTS[,5])
ts.plot(normalizedTS[,3]-normalizedTS[,6])
ts.plot(normalizedTS[,3]-normalizedTS[,7])
ts.plot(normalizedTS[,3]-normalizedTS[,8])
ts.plot(normalizedTS[,3]-normalizedTS[,9])
ts.plot(normalizedTS[,3]-normalizedTS[,10])
ts.plot(normalizedTS[,3]-normalizedTS[,11])
ts.plot(normalizedTS[,3]-normalizedTS[,12])
ts.plot(normalizedTS[,3]-normalizedTS[,13])
ts.plot(normalizedTS[,3]-normalizedTS[,14])
ts.plot(normalizedTS[,4]-normalizedTS[,14])
sModel$model$est$varresult
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
install.packages("TSclust")
library(TSclust)
install.packages("TSclust")
install.packages("TSclust", dependencies = TRUE)
library(TSclust)
install.packages("proxy", dependencies = TRUE)
vignette("dtwclust")
library("TSclust", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("proxy", source = TRUE, dependencies = TRUE)
repos <- getOption('repos')
repos["CRAN"] <- "http://cran.rstudio.org"
option(repos = repos)
install.packages('UsingR')
repos <- getOption('repos')
repos["CRAN"] <- "http://cran.rstudio.org"
option(repos = repos)
install.packages('proxy')
install.packages("dtwclust")
remove.packages("TSclust")
vignette("dtwclust")
vignette("dtwclust")
library("dtw", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("proxy")
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
install.packages("updateR")
version
version
install.packages("updateR")
installed.packages()
update.packages(checkBuilt=TRUE)
packageStatus()
version
package_version()
installed.packages()
installed.packages()
update.packages(checkBuilt=TRUE)
y
update.packages(checkBuilt=TRUE)
y
update.packages(checkBuilt=TRUE)
# initializations
rm(list=ls(all=TRUE))
set.seed(0)
numScenarios = 1000
nRep = 7
today = 15  # we will plan, starting with this day...
forecastWindow = 14 # we will look 14 days of history for fitting the models...
source("runPreamble.R")
# print deterministic elements of the time-series
printTS <- function(srcType, fileType) {
nReplications = nRep+1  # give it another day for look-ahead
data = prepareTSData(dataset, srcType, "extract", fileType, today = today+nReplications, nReplications)
data = apply(data$ts, 2, c)
data = interpolate(simLength = dim(data)[1], lookahead = 0, dim(data)[2], data, 1)
if (srcType == "Solar") { # remove the night-time generations
hourlyData = prepareTSData(dataset, srcType, "extract", fileType, today = today+nReplications, nReplications);
hourlyData = hourlyData$ts
for (g in 1:dim(data)[2]) {
indices <- NULL
for (d in 1:nReplications) {
dayTime = which(hourlyData[,g,d] > 0)
sunrise = (dayTime[1]-1-1)*4+2
sunset = dayTime[ length(dayTime) ]*4
indices = abind(indices, (sunrise:sunset) + (d-1)*96)
}
data[-indices,g,] = 0
}
}
write.csv(data[,,1], sprintf("%s_%s.csv", fileType, srcType))
}
printTS("Load", "DA")
printTS("Load", "RT")
printTS("Solar", "RT")
printTS("Wind", "RT")
setwd("/Users/semihatakan/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts")
# initializations
rm(list=ls(all=TRUE))
set.seed(0)
numScenarios = 1000
nRep = 7
today = 15  # we will plan, starting with this day...
forecastWindow = 14 # we will look 14 days of history for fitting the models...
source("runPreamble.R")
# print deterministic elements of the time-series
printTS <- function(srcType, fileType) {
nReplications = nRep+1  # give it another day for look-ahead
data = prepareTSData(dataset, srcType, "extract", fileType, today = today+nReplications, nReplications)
data = apply(data$ts, 2, c)
data = interpolate(simLength = dim(data)[1], lookahead = 0, dim(data)[2], data, 1)
if (srcType == "Solar") { # remove the night-time generations
hourlyData = prepareTSData(dataset, srcType, "extract", fileType, today = today+nReplications, nReplications);
hourlyData = hourlyData$ts
for (g in 1:dim(data)[2]) {
indices <- NULL
for (d in 1:nReplications) {
dayTime = which(hourlyData[,g,d] > 0)
sunrise = (dayTime[1]-1-1)*4+2
sunset = dayTime[ length(dayTime) ]*4
indices = abind(indices, (sunrise:sunset) + (d-1)*96)
}
data[-indices,g,] = 0
}
}
write.csv(data[,,1], sprintf("%s_%s.csv", fileType, srcType))
}
printTS("Load", "DA")
printTS("Load", "RT")
printTS("Solar", "RT")
printTS("Wind", "RT")
### MAIN LOOP ###
rep = 1
# set the seed
set.seed(rep)
### FIT THE MODEL ###
source("runModel.R")
# ~ mean scenario ~
# compute the mean scenario (inc. lookahead)
meanDailyWTrendtmp <- wModel$model$dailyTrend
meanDailyWTrendtmp <- abind::abind(meanDailyWTrendtmp, wModel$model$dailyTrend[1:lookahead,], along = 1)
meanDailySTrendtmp <- sModel$model$avgSky
meanDailySTrendtmp <- abind::abind(meanDailySTrendtmp, sModel$model$avgSky[1:lookahead,], along = 1)
# interpolate
meanDailyWTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, wModel$numLoc, meanDailyWTrendtmp, 1)
meanDailySTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, sModel$numLoc, meanDailySTrendtmp, 1)
# clean up
sunrise = (sModel$model$dayTime[1]-1-1)*4+2
sunset = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4
meanDailySTrendtmp[-(sunrise:sunset),,] = 0
meanDailyWTrendtmp <- meanDailyWTrendtmp[1:96,,1]
meanDailySTrendtmp <- meanDailySTrendtmp[1:96,,1]
# append
meanDailyWTrend <- abind::abind(meanDailyWTrend, meanDailyWTrendtmp, along = 1)
meanDailySTrend <- abind::abind(meanDailySTrend, meanDailySTrendtmp, along = 1)
### SIMULATE ###
# run the simulation
source("runSimulate.R")
meanDailyWTrend <- NULL; meanDailySTrend <- NULL;
# set the seed
set.seed(rep)
### FIT THE MODEL ###
source("runModel.R")
# ~ mean scenario ~
# compute the mean scenario (inc. lookahead)
meanDailyWTrendtmp <- wModel$model$dailyTrend
meanDailyWTrendtmp <- abind::abind(meanDailyWTrendtmp, wModel$model$dailyTrend[1:lookahead,], along = 1)
meanDailySTrendtmp <- sModel$model$avgSky
meanDailySTrendtmp <- abind::abind(meanDailySTrendtmp, sModel$model$avgSky[1:lookahead,], along = 1)
# interpolate
meanDailyWTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, wModel$numLoc, meanDailyWTrendtmp, 1)
meanDailySTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, sModel$numLoc, meanDailySTrendtmp, 1)
# clean up
sunrise = (sModel$model$dayTime[1]-1-1)*4+2
sunset = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4
meanDailySTrendtmp[-(sunrise:sunset),,] = 0
meanDailyWTrendtmp <- meanDailyWTrendtmp[1:96,,1]
meanDailySTrendtmp <- meanDailySTrendtmp[1:96,,1]
# append
meanDailyWTrend <- abind::abind(meanDailyWTrend, meanDailyWTrendtmp, along = 1)
meanDailySTrend <- abind::abind(meanDailySTrend, meanDailySTrendtmp, along = 1)
### SIMULATE ###
# run the simulation
source("runSimulate.R")
# combine sample paths
scenarios = abind::abind(sPaths, wPaths, along=2)
# print scenarios
for (i in 1:numScenarios) {
write.csv(scenarios[,,i], sprintf("sim_rep%d_scen%d.csv", rep, i))
}
# rm scenarios
rm(wPaths)
rm(sPaths)
rm(scenarios)
# continue with the next day
today = today + 1
# set the seed
set.seed(rep)
### FIT THE MODEL ###
source("runModel.R")
# ~ mean scenario ~
# compute the mean scenario (inc. lookahead)
meanDailyWTrendtmp <- wModel$model$dailyTrend
meanDailyWTrendtmp <- abind::abind(meanDailyWTrendtmp, wModel$model$dailyTrend[1:lookahead,], along = 1)
meanDailySTrendtmp <- sModel$model$avgSky
meanDailySTrendtmp <- abind::abind(meanDailySTrendtmp, sModel$model$avgSky[1:lookahead,], along = 1)
# interpolate
meanDailyWTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, wModel$numLoc, meanDailyWTrendtmp, 1)
meanDailySTrendtmp <- interpolate(simLength = simLength, lookahead = lookahead, sModel$numLoc, meanDailySTrendtmp, 1)
# clean up
sunrise = (sModel$model$dayTime[1]-1-1)*4+2
sunset = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4
meanDailySTrendtmp[-(sunrise:sunset),,] = 0
meanDailyWTrendtmp <- meanDailyWTrendtmp[1:96,,1]
meanDailySTrendtmp <- meanDailySTrendtmp[1:96,,1]
# append
meanDailyWTrend <- abind::abind(meanDailyWTrend, meanDailyWTrendtmp, along = 1)
meanDailySTrend <- abind::abind(meanDailySTrend, meanDailySTrendtmp, along = 1)
### SIMULATE ###
# run the simulation
source("runSimulate.R")
# combine sample paths
scenarios = abind::abind(sPaths, wPaths, along=2)
# print scenarios
for (i in 1:numScenarios) {
write.csv(scenarios[,,i], sprintf("sim_rep%d_scen%d.csv", rep, i))
}
ts.plot(scenarios[,1])
ts.plot(scenarios[,1,])
ts.plot(scenarios[,1,1:100])
ts.plot(scenarios[,2,1:100])
ts.plot(scenarios[,2,1:50])
ts.plot(scenarios[,4,1:50])
ts.plot(scenarios[,20,1:50])
ts.plot(scenarios[,15,1:50])
