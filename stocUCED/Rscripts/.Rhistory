nRep = 7
source("runModel.R")
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
dailySolarTrend
plot.ts(sModel$model$avgSky[,1])
spline(x = 1:(simLength), y = sModel$model$avgSky[,1],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
plot.ts(spline(x = 1:(simLength), y = sModel$model$avgSky[,1],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25)) )
plot.ts( (spline(x = 1:(simLength), y = sModel$model$avgSky[,1],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25)))$y )
dailySTrend[<0, s]
dailySTrend < 0
(dailySTrend < 0)[,s]
(dailySTrend < 0)[,1]
(dailySTrend < 0)[,1]
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
dailySTrend[,s] <- spline(x = 1:(simLength+1), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
}
dailySTrend[dailySTrend < 0] <- 0
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
dailySTrend[,s] <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
}
sModel$model$avgSky[,s]
1:(simLength)
= seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25)
seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25)
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
dailySTrend[,s] <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
}
sModel$model$avgSky[,s]
sModel$model$avgSky[,2]
sModel$model$avgSky[,1]
sModel$model$avgSky[,3]
dailySTrend[,s]
dim(dailySTrend)
length(dailySTrend)
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y
}
dailySTrend[dailySTrend < 0] <- 0
plot.ts(sModel$model$avgSky[,1])
plot.ts(sModel$model$avgSky[,2])
plot.ts(dailySTrend[,2])
plot.ts(dailySTrend[,1])
sModel$model$dayTime
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[sModel$model$dayTime, s] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
plot.ts(dailySTrend[,1])
dailySTrend[,1]
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-sModel$model$dayTime, s] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
plot.ts(dailySTrend[,1])
from = sModel$model$dayTime[1]
from
from = sModel$model$dayTime[1]*4
sModel$model$dayTime
length(sModel$model$dayTime)
seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime)] ]*4-1)
seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime)] ]*4-1)
seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4-1)
seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4+4)
-seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4+2)
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4+2)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4+2)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
plot.ts(dailySTrend[, 1])
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4-2,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
plot.ts(dailySTrend[, 1])
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4-4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
# print the mean scenario
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
dailySTrend[-seq(from = sModel$model$dayTime[1]*4-4,
to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4)] <- 0 #day time
}
dailySTrend[dailySTrend < 0] <- 0 # negative vals
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
dailySTrend[,s] <- tmp$y # interpolation
#  dailySTrend[-seq(from = sModel$model$dayTime[1]*4-4,
#                   to = sModel$model$dayTime[ length(sModel$model$dayTime) ]*4)] <- 0 #day time
}
plot.ts(sModel$model$avgSky)
plot.ts(sModel$model$avgSky[,1])
plot.ts(sModel$model$avgSky[,1])
plot.ts(dailySTrend[,1])
plot.ts(sModel$model$avgSky[,1])
plot.ts(dailySTrend[,1])
dailySTrend[dailySTrend < 0] <- 0 # negative vals
plot.ts(dailySTrend[,1])
sModel$model
sModel$model$dayTime
sModel$model$dayTime[1*4]
sModel$model$dayTime[1]*4
(sModel$model$dayTime[1]*4:length(sModel$model$dayTime)
)
(sModel$model$dayTime[1]*4:sModel$model$dayTime[length(sModel$model$dayTime)]*4)
(sModel$model$dayTime[1]*4:sModel$model$dayTime[length(sModel$model$dayTime)]*4)
sModel$model$dayTime[length(sModel$model$dayTime)]
sModel$model$dayTime[length(sModel$model$dayTime)]*4
((sModel$model$dayTime[1]*4):sModel$model$dayTime[length(sModel$model$dayTime)]*4)
((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))
count((sModel$model$dayTime[1]*4):sModel$model$dayTime[length(sModel$model$dayTime)]*4)
length((sModel$model$dayTime[1]*4):sModel$model$dayTime[length(sModel$model$dayTime)]*4)
length(((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4)))
length(((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4+3)))
-((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))
dailySTrend[((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))]
plot.ts(dailySTrend[((sModel$model$dayTime[1]*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))])
dailySTrend[(((sModel$model$dayTime[1]-1)*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))]
dailySTrend[(((sModel$model$dayTime[1]-1)*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))]
plot.ts(dailySTrend[(((sModel$model$dayTime[1]-1)*4):(sModel$model$dayTime[length(sModel$model$dayTime)]*4))])
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
tmep
tmp
s=1
tmp <- spline(x = 1:(length(sModel$model$dayTime)),
y = sModel$model$avgSky[sModel$model$dayTime,s],
xout = seq(from = 0.5, to = (length(sModel$model$dayTime)+0.5-0.01), by = 0.25))
plot.ts)tmp
plot.ts(tmp)
plot.ts(tmp)
plot.ts(tmp$y)
plot.ts(tmp$y)
plot.ts(tmp$y)
plot.ts(tmp$x)
plot.ts(tmp$y)
tmp[ tmp<0 ] = 0
tmp <- tmp$y
tmp[ tmp<0 ] = 0
plot.ts(tmp$y)
plot.ts(tmp)
dayTime <- seq(from = sModel$model$dayTime[1]*4, to = max(sModel$model$dayTime)*4)
dayTime
sModel$model$dayTime
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
tmp <- spline(x = 1:(length(sModel$model$dayTime)),
y = sModel$model$avgSky[sModel$model$dayTime,s],
xout = seq(from = 0.5, to = (length(sModel$model$dayTime)+0.5-0.01), by = 0.25))
tmp <- tmp$y
tmp[ tmp<0 ] = 0
dayTime <- seq(from = sModel$model$dayTime[1]*4, to = max(sModel$model$dayTime)*4)
dailySTrend[dayTime,s] <- tmp
}
length(tmp)
length(dayTime)
dayTime <- seq(from = sModel$model$dayTime[1]*4, to = max(sModel$model$dayTime)*4 + (4-1))
dailySTrend[dayTime,s] <- tmp
plot.ts(dailySTrend[,1])
plot.ts(sModel$model$avgSky[,1])
plot.ts(dailySTrend[,1])
dayTime <- seq(from = (sModel$model$dayTime[1]-1)*4, to = max(sModel$model$dayTime)*4)
dailySTrend[dayTime,s] <- tmp
length(dayTime)
dayTime <- seq(from = (sModel$model$dayTime[1]-1)*4+1, to = max(sModel$model$dayTime)*4)
length(dayTime)
dailySTrend[dayTime,s] <- tmp
plot.ts(dailySTrend[,1])
dayTime
dayTime
sModel$model$dayTime
dayTime <- seq(from = (sModel$model$dayTime[1])*4-2, to = max(sModel$model$dayTime)*4+2)
dayTime
length(dayTime)
length(tmp)
dayTime <- seq(from = (sModel$model$dayTime[1])*4-2, to = max(sModel$model$dayTime)*4+1)
dailySTrend[dayTime,s] <- tmp
plot.ts(dailySTrend[,1])
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
dailySTrend[dayTime,s] <- tmp
plot.ts(dailySTrend[,1])
plot.ts(sModel$model$dayTime)
plot.ts(sModel$model$avgSky)
plot.ts(sModel$model$avgSky[,1])
plot.ts(dailySTrend[,1])
plot(sModel$model$avgSky[,1])
lines(dailySTrend[,1])
plot(dailySTrend[,1])
plot(1:96, dailySTrend[,1])
plot.ts(1:96, dailySTrend[,1])
plot.ts(sModel$model$avgSky[,1])
plot.ts(1:24, sModel$model$avgSky[,1])
plot.ts(sModel$model$avgSky[,1])
plot.ts(dailySTrend[,1])
plot.ts(dailySTrend[,1], xlim=c(0,24))
plot.ts(dailySTrend[,1], xlim=c(0,96))
plot.ts(sModel$model$avgSky[,1], xlim=c(0,24))
write.csv(dailySTrend, "DA_solar.csv")
write.csv(dailyWTrend, "DA_wind.csv")
replicate
a = matrix(2,2)
a
a = matrix( c(4,2), c(1 ,3))
a
a = matrix(0, 2, 2)
a
a[1] = 4
a[2] = 2
a[2] = 3
a[3] = 5
a[4] = 51
a
replicate(a, 2)
rep(a, 4)
matrix(rep(t(A),n), ncol=ncol(A), byrow=TRUE)
matrix(rep(t(a),n), ncol=ncol(a), byrow=TRUE)
matrix(rep(t(a),4), ncol=ncol(a), byrow=TRUE)
wModel$ts
dim(wModel$ts)
nrep = dim(wModel$ts)[3]
nrep
nRep
do.call("rbind", rep(list(A), n))
do.call("rbind", rep(list(a), 2))
matrix(rep(t(a),2), ncol=ncol(a), byrow=TRUE)
#replicate
nrep = dim(wModel$ts)[3]
dailySTrend = matrix(rep(t(dailySTrend),nrep), ncol=ncol(dailySTrend), byrow=TRUE)
dailyWTrend = matrix(rep(t(dailyWTrend),nrep), ncol=ncol(dailyWTrend), byrow=TRUE)
write.csv(dailySTrend, "DA_solar.csv")
write.csv(dailyWTrend, "DA_wind.csv")
# initializations
# initializations
rm(list=ls(all=TRUE))
# initializations
rm(list=ls(all=TRUE))
set.seed(0)
numScenarios = 1000
nRep = 7
# fit the model
source("runModel.R")
# print the mean scenario
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
tmp <- spline(x = 1:(length(sModel$model$dayTime)),
y = sModel$model$avgSky[sModel$model$dayTime,s],
xout = seq(from = 0.5, to = (length(sModel$model$dayTime)+0.5-0.01), by = 0.25))
tmp <- tmp$y
tmp[ tmp<0 ] = 0
dayTime <- seq(from = (sModel$model$dayTime[1])*4-2, to = max(sModel$model$dayTime)*4+1)
dailySTrend[dayTime,s] <- tmp
}
#replicate
nrep = dim(wModel$ts)[3]
dailySTrend = matrix(rep(t(dailySTrend),nrep), ncol=ncol(dailySTrend), byrow=TRUE)
dailyWTrend = matrix(rep(t(dailyWTrend),nrep), ncol=ncol(dailyWTrend), byrow=TRUE)
# print
write.csv(dailySTrend, "DA_solar.csv")
write.csv(dailyWTrend, "DA_wind.csv")
# initializations
rm(list=ls(all=TRUE))
set.seed(0)
numScenarios = 1000
nRep = 7
# fit the model
source("runModel.R")
# print the mean scenario
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
tmp <- spline(x = 1:(length(sModel$model$dayTime)),
y = sModel$model$avgSky[sModel$model$dayTime,s],
xout = seq(from = 0.5, to = (length(sModel$model$dayTime)+0.5-0.01), by = 0.25))
tmp <- tmp$y
tmp[ tmp<0 ] = 0
dayTime <- seq(from = (sModel$model$dayTime[1])*4-2, to = max(sModel$model$dayTime)*4+1)
dailySTrend[dayTime,s] <- tmp
}
#replicate
nrep = dim(wModel$ts)[3]
dailySTrend = matrix(rep(t(dailySTrend),nrep), ncol=ncol(dailySTrend), byrow=TRUE)
dailyWTrend = matrix(rep(t(dailyWTrend),nrep), ncol=ncol(dailyWTrend), byrow=TRUE)
# print
write.csv(dailySTrend, "DA_solar.csv")
write.csv(dailyWTrend, "DA_wind.csv")
sModel$model$dayTime
ions
rm(list=ls(all=TRUE))
set.seed(0)
numScenarios = 1000
nRep = 7
# fit the model
source("runModel.R")
# print the mean scenario
dailyWTrend <- matrix(data = 0, nrow = simLength*4, ncol = wModel$numLoc);
for (w in 1:wModel$numLoc) {
# below code is trying to interpolate end-of-day and begin-of-day portions of the "dailyTrend"
tmp_trend <- numeric(simLength+1)
tmp_trend[1:24] <- wModel$model$dailyTrend[,w]
tmp_trend[25] <- wModel$model$dailyTrend[1,w]
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength+1), y = tmp_trend,
xout = seq(from = 0.5, to = (simLength+1+0.5-0.01), by = 0.25))
# only get the first 24 hours
dailyWTrend[,w] <- tmp$y[1:(simLength*4)]
}
dailySTrend <- matrix(data = 0, nrow = simLength*4, ncol = sModel$numLoc);
for (s in 1:sModel$numLoc) {
# this interpolation assumes the hourly data was recorded at HH:30.
tmp <- spline(x = 1:(simLength), y = sModel$model$avgSky[,s],
xout = seq(from = 0.5, to = (simLength+0.5-0.01), by = 0.25))
tmp <- spline(x = 1:(length(sModel$model$dayTime)),
y = sModel$model$avgSky[sModel$model$dayTime,s],
xout = seq(from = 0.5, to = (length(sModel$model$dayTime)+0.5-0.01), by = 0.25))
tmp <- tmp$y
tmp[ tmp<0 ] = 0
dayTime <- seq(from = (sModel$model$dayTime[1])*4-2, to = max(sModel$model$dayTime)*4+1)
dailySTrend[dayTime,s] <- tmp
}
#replicate
nrep = dim(wModel$ts)[3]
dailySTrend = matrix(rep(t(dailySTrend),nrep), ncol=ncol(dailySTrend), byrow=TRUE)
dailyWTrend = matrix(rep(t(dailyWTrend),nrep), ncol=ncol(dailyWTrend), byrow=TRUE)
# print
write.csv(dailySTrend, "DA_solar.csv")
write.csv(dailyWTrend, "DA_wind.csv")
# run.R
# Fits the VAR-models
# initializations
#rm(list=ls(all=TRUE))
#set.seed(1)
RScriptsPath = "/Users/semihatakan/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts"
dataSetPath = "/Users/semihatakan/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/datasets/3d-nrel118/stocProcesses"
simLength = 24 #days
#numScenarios = 10
lookahead = 3 #hours
# import libraries
library("abind");
# source functions
source(sprintf("%s/readers/readNRELData.R", RScriptsPath))
source(sprintf("%s/solarModels/solarVarModel.R", RScriptsPath))
source(sprintf("%s/solarModels/solarSimulate.R", RScriptsPath))
source(sprintf("%s/windModels/windVarModel.R", RScriptsPath))
source(sprintf("%s/windModels/windSimulate.R", RScriptsPath))
source(sprintf("%s/tsUtilities/decomposeTSData.R", RScriptsPath))
source(sprintf("%s/tsUtilities/varSimulate.R", RScriptsPath))
source(sprintf("%s/tsUtilities/interpolate.R", RScriptsPath))
### Read Data ###
dataset = readNRELData(inputDir = sprintf("%s/",dataSetPath))
### Wind Model ###
wModel = windVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
wModel$freq
wModel$model$est$varresult
is.na(wModel$model$est$varresult)
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "January", forecastType = "RT", lag.max = 5, infocrit = "SC")
sModel$model$est$varresult
is.na(sModel$model$est$varresult)
is.na(sModel$model$est$varresult$y1)
is.na(sModel$model$est$varresult$y8)
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
numScenarios = 10
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
simLength
lookahead
sModel
numScenarios
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
debugSource('~/Documents/Coding Projects/Power Systems/tamingDuck/tamingDuck/stocUCED/Rscripts/solarModels/solarSimulate.R')
sPaths = solarSimulate(sModel = sModel, simLength = simLength, lookahead = lookahead, numScenarios = numScenarios)
simPaths
wModel = windVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "February", forecastType = "RT", lag.max = 5, infocrit = "SC")
sModel = solarVARModel(dataSet = dataset, decomposeBy = "monthly", identifier = "February", forecastType = "RT", lag.max = 5, infocrit = "SC")
wModel$model$est$varresult
sModel$model$est$varresult
